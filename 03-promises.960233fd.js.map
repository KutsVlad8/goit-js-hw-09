{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAW,GAuCjB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA9CPN,EAAKa,iBAAiB,UAGtB,SAAmBC,GACjBX,EAASW,EAAMC,OAAOC,MAAQC,OAAOH,EAAMC,OAAOG,M,IAHpDlB,EAAKa,iBAAiB,UAMtB,SAAwBC,GACtBA,EAAMK,iBAEN,IAAQC,EAAwBjB,EAAxBG,MAAOe,EAAiBlB,EAAjBkB,KAAMC,EAAWnB,EAAXmB,OAErB,GAAIF,EAAQ,GAAKC,EAAO,GAAKC,EAAS,EAOpC,OANAC,EAAAzB,GAAS0B,OAAOC,QACd,SACA,sCACA,kBAEFC,QAAQC,IAAI,IAId,IAAK,IAAIC,EAAI,EAAGA,GAAKN,EAAQM,GAAK,EAChCxB,EAAcwB,EAAGR,EAAQC,EAAOO,GAC7BC,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACjBiB,EAAAzB,GAASiC,OAAOC,QACd,uBAAwCC,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAGjD4B,OAAM,SAAAJ,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MAClBiB,EAAAzB,GAASiC,OAAON,QACd,sBAAqCQ,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst formData = {};\n\nform.addEventListener('change', textInput);\nform.addEventListener('submit', onSubmitButton);\n\nfunction textInput(event) {\n  formData[event.target.name] = Number(event.target.value);\n}\n\nfunction onSubmitButton(event) {\n  event.preventDefault();\n\n  const { delay, step, amount } = formData;\n\n  if (delay < 0 || step < 0 || amount < 0) {\n    Notiflix.Report.failure(\n      'failed',\n      'Typed number must be greater than 0',\n      'try again'\n    );\n    console.log('');\n    return;\n  }\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay + step * i)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.5;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$formData","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","target","name","Number","value","preventDefault","delay1","step","amount","$parcel$interopDefault","Report","failure","console","log","i","then","param","Notify","success","concat","catch"],"version":3,"file":"03-promises.960233fd.js.map"}